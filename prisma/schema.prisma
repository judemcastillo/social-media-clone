// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConversationRole {
  MEMBER
  ADMIN
}

enum ParticipantStatus {
  INVITED
  JOINED
  LEFT
}

enum Role {
  USER
  ADMIN
  GUEST
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  image         String?
  role          Role     @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bio           String? // optional
  skills        String[] @default([]) // list; empty = not provided
  coverImageUrl String? // optional "cover photo"

  // NextAuth tables:
  accounts Account[]
  sessions Session[]

  Authenticator Authenticator[]

  // future relations:

  followers               Follow[]                  @relation("followers") // users who follow THIS user
  following               Follow[]                  @relation("following") // users THIS user follows
  Credential              Credential?
  Post                    Post[]
  Comment                 Comment[]
  Like                    Like[]
  Conversation            Conversation[]
  ConversationParticipant ConversationParticipant[]
  Message                 Message[]
  MessageRead             MessageRead[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Credential {
  id           String @id @default(cuid())
  userId       String @unique
  passwordHash String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  imageUrl  String? // optional, for later extra credit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  comments Comment[]
  likes    Like[]
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([postId, userId]) // one like per user per post
}

model Follow {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId]) // one row per edge
  @@index([followingId, followerId]) // quick lookups
}

model Conversation {
  id           String                    @id @default(cuid())
  isGroup      Boolean                   @default(false) // true for group/rooms
  isPublic     Boolean                   @default(false) // true = open room (anyone can join)
  title        String?
  createdById  String
  createdBy    User                      @relation(fields: [createdById], references: [id], onDelete: Cascade)
  participants ConversationParticipant[]
  messages     Message[]
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt

  @@index([isPublic])
}

model ConversationParticipant {
  conversationId String
  userId         String
  role           ConversationRole  @default(MEMBER)
  status         ParticipantStatus @default(JOINED)
  joinedAt       DateTime          @default(now())
  invitedById    String?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([conversationId, userId])
  @@index([userId])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  authorId       String
  content        String?  @db.Text
  createdAt      DateTime @default(now())

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  author       User         @relation(fields: [authorId], references: [id], onDelete: Cascade)

  attachments MessageAttachment[]
  reads       MessageRead[]

  @@index([conversationId, createdAt])
}

model MessageAttachment {
  id        String @id @default(cuid())
  messageId String
  url       String
  type      String // "image" | "video" | "file"
  width     Int?
  height    Int?
  size      Int?

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model MessageRead {
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([messageId, userId])
  @@index([userId])
}
